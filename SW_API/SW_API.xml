<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SW_API</name>
    </assembly>
    <members>
        <member name="T:SW_API.Controllers.CharacterController">
            <summary>
            Controller for accessing character CRUD
            </summary>
        </member>
        <member name="M:SW_API.Controllers.CharacterController.#ctor(SW_API.Server.Services.ICharacterService)">
            <summary>
            CTOR
            </summary>
            <param name="characterService">Character Service DI</param>
        </member>
        <member name="M:SW_API.Controllers.CharacterController.GetCharacter(System.Guid)">
            <summary>
            Returns character by ID
            </summary>
            <param name="id">Character GUID</param>
            <returns>Character object</returns>
        </member>
        <member name="M:SW_API.Controllers.CharacterController.GetCharacters">
            <summary>
            Returns all characters.
            </summary>
            <returns>Collection of characters.</returns>
        </member>
        <member name="M:SW_API.Controllers.CharacterController.GetCharactersPaginated(SW_API.Models.PagedListRequest)">
            <summary>
            Returns all characters - paginated.
            </summary>
            <returns>Paginated collection of characters.</returns>
        </member>
        <member name="M:SW_API.Controllers.CharacterController.AddNewCharacter(SW_API.Server.Models.AddCharacterRequest)">
            <summary>
            Adds a character to the db.
            </summary>
            <param name="newCharacterBody">Object containing info about character to be added.</param>
            <returns>Operation status</returns>
        </member>
        <member name="M:SW_API.Controllers.CharacterController.RemoveCharacter(System.Guid)">
            <summary>
            Removes a character from the db
            </summary>
            <param name="id">ID of given character object</param>
            <returns>Operation status</returns>
        </member>
        <member name="T:SW_API.Controllers.MediaController">
            <summary>
            Controlled for accessing media CRUD
            </summary>
        </member>
        <member name="M:SW_API.Controllers.MediaController.#ctor(SW_API.Server.Services.IMediaService)">
            <summary>
            CTOR
            </summary>
            <param name="mediaService">Media Service DI</param>
        </member>
        <member name="M:SW_API.Controllers.MediaController.GetMedia(System.Guid)">
            <summary>
            Returns media by ID
            </summary>
            <param name="id">Media GUID</param>
            <returns>Media object</returns>
        </member>
        <member name="M:SW_API.Controllers.MediaController.GetMediaList">
            <summary>
            Returns all media.
            </summary>
            <returns>Collection of media.</returns>
        </member>
        <member name="M:SW_API.Controllers.MediaController.GetMediaPaginated(SW_API.Models.PagedListRequest)">
            <summary>
            Returns all media - paginated.
            </summary>
            <returns>Paginated collection of media.</returns>
        </member>
        <member name="M:SW_API.Controllers.MediaController.AddNewMedia(SW_API.Server.Models.AddMediaRequest)">
            <summary>
            Adds a media to the db.
            </summary>
            <param name="newMediaBody">Object containing info about media to be added.</param>
            <returns>Operation status</returns>
        </member>
        <member name="M:SW_API.Controllers.MediaController.RemoveMedia(System.Guid)">
            <summary>
            Removes a media from the db
            </summary>
            <param name="id">ID of given media object</param>
            <returns>Operation status</returns>
        </member>
        <member name="M:SW_API.Controllers.MediaController.UpdateMediaBaseInfo(System.Guid,SW_API.Server.Models.UpdateMediaInfoRequest)">
            <summary>
            Updates media information in db
            </summary>
            <param name="id">ID of given media object</param>
            <param name="request">Target data values</param>
            <returns>Operation status</returns>
        </member>
        <member name="T:SW_API.Models.PagedListRequest">
            <summary>
            Query containing pagination data
            </summary>
        </member>
        <member name="P:SW_API.Models.PagedListRequest.PageSize">
            <summary>
            Size of page
            </summary>
        </member>
        <member name="P:SW_API.Models.PagedListRequest.PageNumber">
            <summary>
            Page number starts from 1
            </summary>
        </member>
        <member name="T:SW_API.Program">
            <summary>
            Main application class
            </summary>
        </member>
        <member name="M:SW_API.Program.Main(System.String[])">
            <summary>
            Main application method
            </summary>
            <param name="args">Running arguments</param>
        </member>
        <member name="M:SW_API.Program.CreateHostBuilder(System.String[])">
            <summary>
            Create Host Builder
            </summary>
            <param name="args">Running Arguments</param>
            <returns>Host Builder</returns>
        </member>
        <member name="T:SW_API.Startup">
            <summary>
            Startup
            </summary>
        </member>
        <member name="M:SW_API.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Startup Constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:SW_API.Startup.Configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="M:SW_API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
        </member>
        <member name="M:SW_API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
        </member>
    </members>
</doc>
